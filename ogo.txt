from PyQt6 import QtCore, QtGui, QtWidgets
import MySQLdb as mdb

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 800)
        MainWindow.setStyleSheet("background-color: #FFF5E1;")  # Нежно-оранжевый фон

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Заголовок
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(250, 10, 300, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.label.setStyleSheet("color: #D2691E;")  # Тёмно-оранжевый текст

        # Кнопка для вывода данных из базы данных
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(80, 80, 641, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet("background-color: #FFCC99; border: 1px solid #D2691E; border-radius: 10px; font-size: 14px;")

        # Поле вывода данных из базы данных
        self.label_2 = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 140, 641, 121))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet("background-color: #FFF8DC; border: 1px solid #D2691E; border-radius: 10px;")

        # Вторая кнопка для отображения данных
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(80, 280, 641, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setStyleSheet("background-color: #FFCC99; border: 1px solid #D2691E; border-radius: 10px; font-size: 14px;")

        # Поле вывода данных второй кнопки
        self.label_3 = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(80, 340, 641, 121))
        self.label_3.setObjectName("label_3")
        self.label_3.setStyleSheet("background-color: #FFF8DC; border: 1px solid #D2691E; border-radius: 10px;")

        # Третья кнопка для отображения данных
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(80, 480, 641, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setStyleSheet("background-color: #FFCC99; border: 1px solid #D2691E; border-radius: 10px; font-size: 14px;")

        # Поле вывода данных третьей кнопки
        self.label_4 = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(80, 540, 641, 121))
        self.label_4.setObjectName("label_4")
        self.label_4.setStyleSheet("background-color: #FFF8DC; border: 1px solid #D2691E; border-radius: 10px;")

        # Поля для добавления данных в базу данных
        self.input_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.input_label.setGeometry(QtCore.QRect(80, 680, 300, 30))
        self.input_label.setText("Добавить рейс (Название, Станция):")
        self.input_label.setStyleSheet("color: #D2691E; font-size: 14px;")

        self.input_name = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.input_name.setGeometry(QtCore.QRect(80, 720, 150, 30))
        self.input_name.setStyleSheet("background-color: #FFF8DC; border: 1px solid #D2691E; border-radius: 5px;")

        self.input_station = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.input_station.setGeometry(QtCore.QRect(240, 720, 150, 30))
        self.input_station.setStyleSheet("background-color: #FFF8DC; border: 1px solid #D2691E; border-radius: 5px;")

        self.add_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.add_button.setGeometry(QtCore.QRect(400, 720, 100, 30))
        self.add_button.setText("Добавить")
        self.add_button.setStyleSheet("background-color: #FFCC99; border: 1px solid #D2691E; border-radius: 5px; font-size: 14px;")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setStyleSheet("color: #D2691E;")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Работа с базой данных"))
        self.label.setText(_translate("MainWindow", "Работа с базой данных"))
        self.pushButton.setText(_translate("MainWindow", "Вывести данные из таблицы raise"))
        self.pushButton_2.setText(_translate("MainWindow", "Группировать данные по станциям"))
        self.pushButton_3.setText(_translate("MainWindow", "Посчитать вместимость автобусов"))

        # Подключение кнопок к их действиям
        self.pushButton.clicked.connect(self.display_data)
        self.pushButton_2.clicked.connect(self.display_data_1)
        self.pushButton_3.clicked.connect(self.display_data_2)
        self.add_button.clicked.connect(self.add_data)

    # Метод для вывода всех данных из таблицы raise
    def display_data(self):
        con = mdb.connect(
            host="localhost",
            user='root',
            database='kval_1'
        )
        with con:
            cur = con.cursor()
            cur.execute('SELECT * from raise')
            data = cur.fetchall()
            formatted_data = '\n'.join(str(row) for row in data)
            self.label_2.setText(formatted_data)

    # Метод для группировки данных по станциям
    def display_data_1(self):
        con = mdb.connect(
            host="localhost",
            user='root',
            database='kval_1'
        )
        with con:
            cur = con.cursor()
            cur.execute('''SELECT station.name AS Станция, COUNT(raise.id) AS Количество_рейсов 
                           FROM raise 
                           JOIN station ON raise.id_station = station.Id 
                           GROUP BY station.name''')
            data = cur.fetchall()
            formatted_data = '\n'.join(str(row) for row in data)
            self.label_3.setText(formatted_data)

    # Метод для подсчета общей вместимости автобусов
    def display_data_2(self):
        con = mdb.connect(
            host="localhost",
            user='root',
            database='kval_1'
        )
        with con:
            cur = con.cursor()
            cur.execute('SELECT SUM(bus.vmestimost) FROM bus')
            data = cur.fetchall()
            formatted_data = '\n'.join(str(row) for row in data)
            self.label_4.setText(formatted_data)

    # Метод для добавления данных в таблицу raise
    def add_data(self):
        name = self.input_name.text()
        station = self.input_station.text()

        if name and station:
            try:
                con = mdb.connect(
                    host="localhost",
                    user='root',
                    database='kval_1'
                )
                with con:
                    cur = con.cursor()
                    cur.execute(
                        'INSERT INTO raise (name, id_station) VALUES (%s, %s)', (name, station)
                    )
                    con.commit()
                    self.statusbar.showMessage("Данные успешно добавлены!", 5000)
            except Exception as e:
                self.statusbar.showMessage(f"Ошибка: {e}", 5000)
        else:
            self.statusbar.showMessage("Заполните все поля!", 5000)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
